(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code:: *)
Int[u_*Log[v_],x_Symbol] :=
  With[{w=DerivativeDivides[v,u*(1-v),x]},
  w*PolyLog[2,1-v] /;
 Not[FalseQ[w]]]


(* ::Code:: *)
Int[(a_.+b_.*Log[u_])*Log[v_]*w_,x_Symbol] :=
  With[{z=DerivativeDivides[v,w*(1-v),x]},
  z*(a+b*Log[u])*PolyLog[2,1-v] - 
  b*Int[SimplifyIntegrand[z*PolyLog[2,1-v]*D[u,x]/u,x],x] /;
 Not[FalseQ[z]]] /;
FreeQ[{a,b},x] && InverseFunctionFreeQ[u,x]


(* ::Code:: *)
Int[Log[c_.*Log[d_.*x_^n_.]^p_.],x_Symbol] :=
  x*Log[c*Log[d*x^n]^p] - n*p*Int[1/Log[d*x^n],x] /;
FreeQ[{c,d,n,p},x]


(* ::Code:: *)
Int[(a_.+b_.*Log[c_.*Log[d_.*x_^n_.]^p_.])/x_,x_Symbol] :=
  Log[d*x^n]*(a+b*Log[c*Log[d*x^n]^p])/n - b*p*Log[x] /;
FreeQ[{a,b,c,d,n,p},x]


(* ::Code:: *)
Int[(e_.*x_)^m_.*(a_.+b_.*Log[c_.*Log[d_.*x_^n_.]^p_.]),x_Symbol] :=
  (e*x)^(m+1)*(a+b*Log[c*Log[d*x^n]^p])/(e*(m+1)) - b*n*p/(m+1)*Int[(e*x)^m/Log[d*x^n],x] /;
FreeQ[{a,b,c,d,e,m,n,p},x] && NeQ[m,-1]


(* ::Code:: *)
Int[(a_.+b_.*Log[c_.*RFx_^p_.])^n_.,x_Symbol] :=
  x*(a+b*Log[c*RFx^p])^n - 
  b*n*p*Int[SimplifyIntegrand[x*(a+b*Log[c*RFx^p])^(n-1)*D[RFx,x]/RFx,x],x] /;
FreeQ[{a,b,c,p},x] && RationalFunctionQ[RFx,x] && IGtQ[n,0]


(* ::Code:: *)
Int[(a_.+b_.*Log[c_.*RFx_^p_.])^n_./(d_.+e_.*x_),x_Symbol] :=
  Log[d+e*x]*(a+b*Log[c*RFx^p])^n/e - 
  b*n*p/e*Int[Log[d+e*x]*(a+b*Log[c*RFx^p])^(n-1)*D[RFx,x]/RFx,x] /;
FreeQ[{a,b,c,d,e,p},x] && RationalFunctionQ[RFx,x] && IGtQ[n,0]


(* ::Code:: *)
Int[(d_.+e_.*x_)^m_.*(a_.+b_.*Log[c_.*RFx_^p_.])^n_.,x_Symbol] :=
  (d+e*x)^(m+1)*(a+b*Log[c*RFx^p])^n/(e*(m+1)) - 
  b*n*p/(e*(m+1))*Int[SimplifyIntegrand[(d+e*x)^(m+1)*(a+b*Log[c*RFx^p])^(n-1)*D[RFx,x]/RFx,x],x] /;
FreeQ[{a,b,c,d,e,m,p},x] && RationalFunctionQ[RFx,x] && IGtQ[n,0] && (EqQ[n,1] || IntegerQ[m]) && NeQ[m,-1]


(* ::Code:: *)
Int[Log[c_.*RFx_^n_.]/(d_+e_.*x_^2),x_Symbol] :=
  With[{u=IntHide[1/(d+e*x^2),x]},  
  u*Log[c*RFx^n] - n*Int[SimplifyIntegrand[u*D[RFx,x]/RFx,x],x]] /;
FreeQ[{c,d,e,n},x] && RationalFunctionQ[RFx,x] && Not[PolynomialQ[RFx,x]]


(* ::Code:: *)
Int[Log[c_.*Px_^n_.]/Qx_,x_Symbol] :=
  With[{u=IntHide[1/Qx,x]},  
  u*Log[c*Px^n] - n*Int[SimplifyIntegrand[u*D[Px,x]/Px,x],x]] /;
FreeQ[{c,n},x] && QuadraticQ[{Qx,Px},x] && EqQ[D[Px/Qx,x],0]


(* ::Code:: *)
Int[RGx_*(a_.+b_.*Log[c_.*RFx_^p_.])^n_.,x_Symbol] :=
  With[{u=ExpandIntegrand[(a+b*Log[c*RFx^p])^n,RGx,x]},
  Int[u,x] /;
 SumQ[u]] /;
FreeQ[{a,b,c,p},x] && RationalFunctionQ[RFx,x] && RationalFunctionQ[RGx,x] && IGtQ[n,0]


(* ::Code:: *)
Int[RGx_*(a_.+b_.*Log[c_.*RFx_^p_.])^n_.,x_Symbol] :=
  With[{u=ExpandIntegrand[RGx*(a+b*Log[c*RFx^p])^n,x]},
  Int[u,x] /;
 SumQ[u]] /;
FreeQ[{a,b,c,p},x] && RationalFunctionQ[RFx,x] && RationalFunctionQ[RGx,x] && IGtQ[n,0]


(* ::Code:: *)
Int[RFx_*(a_.+b_.*Log[u_]),x_Symbol] :=
  With[{lst=SubstForFractionalPowerOfLinear[RFx*(a+b*Log[u]),x]},
  lst[[2]]*lst[[4]]*Subst[Int[lst[[1]],x],x,lst[[3]]^(1/lst[[2]])] /;
 Not[FalseQ[lst]]] /;
FreeQ[{a,b},x] && RationalFunctionQ[RFx,x]


(* ::Code:: *)
Int[(f_.+g_.*x_)^m_.*Log[1+e_.*(F_^(c_.*(a_.+b_.*x_)))^n_.],x_Symbol] :=
  -(f+g*x)^m*PolyLog[2,-e*(F^(c*(a+b*x)))^n]/(b*c*n*Log[F]) + 
  g*m/(b*c*n*Log[F])*Int[(f+g*x)^(m-1)*PolyLog[2,-e*(F^(c*(a+b*x)))^n],x] /;
FreeQ[{F,a,b,c,e,f,g,n},x] && GtQ[m,0]


(* ::Code:: *)
Int[(f_.+g_.*x_)^m_.*Log[d_+e_.*(F_^(c_.*(a_.+b_.*x_)))^n_.],x_Symbol] :=
  (f+g*x)^(m+1)*Log[d+e*(F^(c*(a+b*x)))^n]/(g*(m+1)) - 
  (f+g*x)^(m+1)*Log[1+e/d*(F^(c*(a+b*x)))^n]/(g*(m+1)) + 
  Int[(f+g*x)^m*Log[1+e/d*(F^(c*(a+b*x)))^n],x] /;
FreeQ[{F,a,b,c,d,e,f,g,n},x] && GtQ[m,0] && NeQ[d,1]


(* ::Code:: *)
Int[Log[d_.+e_.*x_+f_.*Sqrt[a_.+b_.*x_+c_.*x_^2]],x_Symbol] :=
  x*Log[d+e*x+f*Sqrt[a+b*x+c*x^2]] + 
  f^2*(b^2-4*a*c)/2*Int[x/((2*d*e-b*f^2)*(a+b*x+c*x^2)-f*(b*d-2*a*e+(2*c*d-b*e)*x)*Sqrt[a+b*x+c*x^2]),x] /;
FreeQ[{a,b,c,d,e,f},x] && EqQ[e^2-c*f^2,0]


(* ::Code:: *)
Int[Log[d_.+e_.*x_+f_.*Sqrt[a_.+c_.*x_^2]],x_Symbol] :=
  x*Log[d+e*x+f*Sqrt[a+c*x^2]] - 
  a*c*f^2*Int[x/(d*e*(a+c*x^2)+f*(a*e-c*d*x)*Sqrt[a+c*x^2]),x] /;
FreeQ[{a,c,d,e,f},x] && EqQ[e^2-c*f^2,0]


(* ::Code:: *)
Int[(g_.*x_)^m_.*Log[d_.+e_.*x_+f_.*Sqrt[a_.+b_.*x_+c_.*x_^2]],x_Symbol] :=
  (g*x)^(m+1)*Log[d+e*x+f*Sqrt[a+b*x+c*x^2]]/(g*(m+1)) + 
  f^2*(b^2-4*a*c)/(2*g*(m+1))*Int[(g*x)^(m+1)/((2*d*e-b*f^2)*(a+b*x+c*x^2)-f*(b*d-2*a*e+(2*c*d-b*e)*x)*Sqrt[a+b*x+c*x^2]),x] /;
FreeQ[{a,b,c,d,e,f,g,m},x] && EqQ[e^2-c*f^2,0] && NeQ[m,-1] && IntegerQ[2*m]


(* ::Code:: *)
Int[(g_.*x_)^m_.*Log[d_.+e_.*x_+f_.*Sqrt[a_.+c_.*x_^2]],x_Symbol] :=
  (g*x)^(m+1)*Log[d+e*x+f*Sqrt[a+c*x^2]]/(g*(m+1)) - 
  a*c*f^2/(g*(m+1))*Int[(g*x)^(m+1)/(d*e*(a+c*x^2)+f*(a*e-c*d*x)*Sqrt[a+c*x^2]),x] /;
FreeQ[{a,c,d,e,f,g,m},x] && EqQ[e^2-c*f^2,0] && NeQ[m,-1] && IntegerQ[2*m]


(* ::Code:: *)
Int[v_.*Log[d_.+e_.*x_+f_.*Sqrt[u_]],x_Symbol] :=
  Int[v*Log[d+e*x+f*Sqrt[ExpandToSum[u,x]]],x] /;
FreeQ[{d,e,f},x] && QuadraticQ[u,x] && Not[QuadraticMatchQ[u,x]] && (EqQ[v,1] || MatchQ[v,(g_.*x)^m_. /; FreeQ[{g,m},x]])


(* ::Code:: *)
Int[Log[c_.*x_^n_.]^r_./(x_*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)),x_Symbol] :=
  Log[a*x^m+b*Log[c*x^n]^q]/(b*n*q) - a*m/(b*n*q)*Int[x^(m-1)/(a*x^m+b*Log[c*x^n]^q),x] /;
FreeQ[{a,b,c,m,n,q,r},x] && EqQ[r,q-1]


(* ::Code:: *)
Int[Log[c_.*x_^n_.]^r_.*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)^p_./x_,x_Symbol] :=
  Int[ExpandIntegrand[Log[c*x^n]^r/x,(a*x^m+b*Log[c*x^n]^q)^p,x],x] /;
FreeQ[{a,b,c,m,n,p,q,r},x] && EqQ[r,q-1] && IGtQ[p,0]


(* ::Code:: *)
Int[Log[c_.*x_^n_.]^r_.*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)^p_./x_,x_Symbol] :=
  (a*x^m+b*Log[c*x^n]^q)^(p+1)/(b*n*q*(p+1)) - 
  a*m/(b*n*q)*Int[x^(m-1)*(a*x^m+b*Log[c*x^n]^q)^p,x] /;
FreeQ[{a,b,c,m,n,p,q,r},x] && EqQ[r,q-1] && NeQ[p,-1]


(* ::Code:: *)
Int[(d_.*x_^m_.+e_.*Log[c_.*x_^n_.]^r_.)/(x_*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)),x_Symbol] :=
  e*Log[a*x^m+b*Log[c*x^n]^q]/(b*n*q) /;
FreeQ[{a,b,c,d,e,m,n,q,r},x] && EqQ[r,q-1] && EqQ[a*e*m-b*d*n*q,0]


(* ::Code:: *)
Int[(u_+d_.*x_^m_.+e_.*Log[c_.*x_^n_.]^r_.)/(x_*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)),x_Symbol] :=
  e*Log[a*x^m+b*Log[c*x^n]^q]/(b*n*q) + Int[u/(x*(a*x^m+b*Log[c*x^n]^q)),x] /;
FreeQ[{a,b,c,d,e,m,n,q,r},x] && EqQ[r,q-1] && EqQ[a*e*m-b*d*n*q,0]


(* ::Code:: *)
Int[(d_.*x_^m_.+e_.*Log[c_.*x_^n_.]^r_.)/(x_*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)),x_Symbol] :=
  e*Log[a*x^m+b*Log[c*x^n]^q]/(b*n*q) - 
  (a*e*m-b*d*n*q)/(b*n*q)*Int[x^(m-1)/(a*x^m+b*Log[c*x^n]^q),x] /;
FreeQ[{a,b,c,d,e,m,n,q,r},x] && EqQ[r,q-1] && NeQ[a*e*m-b*d*n*q,0]


(* ::Code:: *)
Int[(d_.*x_^m_.+e_.*Log[c_.*x_^n_.]^r_.)*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)^p_./x_,x_Symbol] :=
  e*(a*x^m+b*Log[c*x^n]^q)^(p+1)/(b*n*q*(p+1)) /;
FreeQ[{a,b,c,d,e,m,n,p,q,r},x] && EqQ[r,q-1] && NeQ[p,-1] && EqQ[a*e*m-b*d*n*q,0]


(* ::Code:: *)
Int[(d_.*x_^m_.+e_.*Log[c_.*x_^n_.]^r_.)*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)^p_./x_,x_Symbol] :=
  e*(a*x^m+b*Log[c*x^n]^q)^(p+1)/(b*n*q*(p+1)) - 
  (a*e*m-b*d*n*q)/(b*n*q)*Int[x^(m-1)*(a*x^m+b*Log[c*x^n]^q)^p,x] /;
FreeQ[{a,b,c,d,e,m,n,p,q,r},x] && EqQ[r,q-1] && NeQ[p,-1] && NeQ[a*e*m-b*d*n*q,0]


(* ::Code:: *)
Int[(d_.*x_^m_.+e_.*x_^m_.*Log[c_.*x_^n_.]+f_.*Log[c_.*x_^n_.]^q_.)/(x_*(a_.*x_^m_.+b_.*Log[c_.*x_^n_.]^q_)^2),x_Symbol] :=
  d*Log[c*x^n]/(a*n*(a*x^m+b*Log[c*x^n]^q)) /;
FreeQ[{a,b,c,d,e,f,m,n,q},x] && EqQ[e*n+d*m,0] && EqQ[a*f+b*d*(q-1),0]


(* ::Code:: *)
Int[(d_+e_.*Log[c_.*x_^n_.])/(a_.*x_+b_.*Log[c_.*x_^n_.]^q_)^2,x_Symbol] :=
  -e*Log[c*x^n]/(a*(a*x+b*Log[c*x^n]^q)) + (d+e*n)/a*Int[1/(x*(a*x+b*Log[c*x^n]^q)),x] /;
FreeQ[{a,b,c,d,e,n,q},x] && EqQ[d+e*n*q,0]


(* ::Code:: *)
Int[Log[u_],x_Symbol] :=
  x*Log[u] - Int[SimplifyIntegrand[x*D[u,x]/u,x],x] /;
InverseFunctionFreeQ[u,x]


(* ::Code:: *)
Int[Log[u_],x_Symbol] :=
  x*Log[u] - Int[SimplifyIntegrand[x*Simplify[D[u,x]/u],x],x] /;
ProductQ[u]


(* ::Code:: *)
Int[Log[u_]/(a_.+b_.*x_),x_Symbol] :=
  Log[a+b*x]*Log[u]/b -
  1/b*Int[SimplifyIntegrand[Log[a+b*x]*D[u,x]/u,x],x] /;
FreeQ[{a,b},x] && RationalFunctionQ[D[u,x]/u,x] && (NeQ[a,0] || Not[BinomialQ[u,x] && EqQ[BinomialDegree[u,x]^2,1]])


(* ::Code:: *)
Int[(a_.+b_.*x_)^m_.*Log[u_],x_Symbol] :=
  (a+b*x)^(m+1)*Log[u]/(b*(m+1)) - 
  1/(b*(m+1))*Int[SimplifyIntegrand[(a+b*x)^(m+1)*D[u,x]/u,x],x] /;
FreeQ[{a,b,m},x] && InverseFunctionFreeQ[u,x] && NeQ[m,-1] (* && Not[FunctionOfQ[x^(m+1),u,x]] && FalseQ[PowerVariableExpn[u,m+1,x]] *)


(* ::Code:: *)
Int[Log[u_]/Qx_,x_Symbol] :=
  With[{v=IntHide[1/Qx,x]},  
  v*Log[u] - Int[SimplifyIntegrand[v*D[u,x]/u,x],x]] /;
QuadraticQ[Qx,x] && InverseFunctionFreeQ[u,x]


(* ::Code:: *)
Int[u_^(a_.*x_)*Log[u_],x_Symbol] :=
  u^(a*x)/a - Int[SimplifyIntegrand[x*u^(a*x-1)*D[u,x],x],x] /;
FreeQ[a,x] && InverseFunctionFreeQ[u,x]


(* ::Code:: *)
Int[v_*Log[u_],x_Symbol] :=
  With[{w=IntHide[v,x]},  
  Dist[Log[u],w,x] - Int[SimplifyIntegrand[w*D[u,x]/u,x],x] /;
 InverseFunctionFreeQ[w,x]] /;
InverseFunctionFreeQ[u,x]


(* ::Code:: *)
Int[v_*Log[u_],x_Symbol] :=
  With[{w=IntHide[v,x]},  
  Dist[Log[u],w,x] - Int[SimplifyIntegrand[w*Simplify[D[u,x]/u],x],x] /;
 InverseFunctionFreeQ[w,x]] /;
ProductQ[u]


(* ::Code:: *)
Int[Log[v_]*Log[w_],x_Symbol] :=
  x*Log[v]*Log[w] - 
  Int[SimplifyIntegrand[x*Log[w]*D[v,x]/v,x],x] - 
  Int[SimplifyIntegrand[x*Log[v]*D[w,x]/w,x],x] /;
InverseFunctionFreeQ[v,x] && InverseFunctionFreeQ[w,x]


(* ::Code:: *)
Int[u_*Log[v_]*Log[w_],x_Symbol] :=
  With[{z=IntHide[u,x]},  
  Dist[Log[v]*Log[w],z,x] - 
  Int[SimplifyIntegrand[z*Log[w]*D[v,x]/v,x],x] - 
  Int[SimplifyIntegrand[z*Log[v]*D[w,x]/w,x],x] /;
 InverseFunctionFreeQ[z,x]] /;
InverseFunctionFreeQ[v,x] && InverseFunctionFreeQ[w,x]


(* ::Code:: *)
Int[f_^(a_.*Log[u_]),x_Symbol] :=
  Int[u^(a*Log[f]),x] /;
FreeQ[{a,f},x]


(* ::Code:: *)
(* If[TrueQ[$LoadShowSteps],

Int[u_/x_,x_Symbol] :=
  With[{lst=FunctionOfLog[u,x]},
  ShowStep["","Int[F[Log[a*x^n]]/x,x]","Subst[Int[F[x],x],x,Log[a*x^n]]/n",Hold[
  1/lst[[3]]*Subst[Int[lst[[1]],x],x,Log[lst[[2]]]]]] /;
 Not[FalseQ[lst]]] /;
SimplifyFlag && NonsumQ[u],

Int[u_/x_,x_Symbol] :=
  With[{lst=FunctionOfLog[u,x]},
  1/lst[[3]]*Subst[Int[lst[[1]],x],x,Log[lst[[2]]]] /;
 Not[FalseQ[lst]]] /;
NonsumQ[u]] *)


(* ::Code:: *)
If[TrueQ[$LoadShowSteps],

Int[u_,x_Symbol] :=
  With[{lst=FunctionOfLog[Cancel[x*u],x]},
  ShowStep["","Int[F[Log[a*x^n]]/x,x]","Subst[Int[F[x],x],x,Log[a*x^n]]/n",Hold[
  1/lst[[3]]*Subst[Int[lst[[1]],x],x,Log[lst[[2]]]]]] /;
 Not[FalseQ[lst]]] /;
SimplifyFlag && NonsumQ[u],

Int[u_,x_Symbol] :=
  With[{lst=FunctionOfLog[Cancel[x*u],x]},
  1/lst[[3]]*Subst[Int[lst[[1]],x],x,Log[lst[[2]]]] /;
 Not[FalseQ[lst]]] /;
NonsumQ[u]]


(* ::Code:: *)
Int[u_.*Log[Gamma[v_]],x_Symbol] :=
  (Log[Gamma[v]]-LogGamma[v])*Int[u,x] + Int[u*LogGamma[v],x]


(* ::Code:: *)
Int[u_.*(a_.*x_^m_.+b_.*x_^r_.*Log[c_.*x_^n_.]^q_.)^p_.,x_Symbol] :=
  Int[u*x^(p*r)*(a*x^(m-r)+b*Log[c*x^n]^q)^p,x] /;
FreeQ[{a,b,c,m,n,p,q,r},x] && IntegerQ[p]



