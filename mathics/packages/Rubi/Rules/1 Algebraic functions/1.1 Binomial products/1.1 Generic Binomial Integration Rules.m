(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_,x_Symbol] :=
  Int[x^(n*p)*(b+a*x^(-n))^p,x] /;
FreeQ[{a,b},x] && LtQ[n,0] && ILtQ[p,0]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_,x_Symbol] :=
  x*(a+b*x^n)^(p+1)/a /;
FreeQ[{a,b,n,p},x] && EqQ[1/n+p+1,0]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_,x_Symbol] :=
  -Subst[Int[(a+b*x^(-n))^p/x^2,x],x,1/x] /;
FreeQ[{a,b,p},x] && ILtQ[n,0] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[n]},
  k \[Star] Subst[Int[x^(k-1)*(a+b*x^(k*n))^p,x],x,x^(1/k)] /;
 IntBinomialQ[a,b,1,k*n,k-1,p,x]] /;
FreeQ[{a,b,p},x] && FractionQ[n]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_,x_Symbol] :=
  Int[ExpandIntegrand[(a+b*x^n)^p,x],x] /;
FreeQ[{a,b,n},x] && IGtQ[p,0]


(* ::Code:: *)
Int[x_^m_./(a_+b_.*x_^n_),x_Symbol] :=
  Log[RemoveContent[a+b*x^n,x]]/(b*n) /;
FreeQ[{a,b,m,n},x] && EqQ[m,n-1]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_.,x_Symbol] :=
  (a+b*x^n)^(p+1)/(b*n*(p+1)) /;
FreeQ[{a,b,m,n,p},x] && EqQ[m,n-1] && NeQ[p,-1]


(* ::Code:: *)
Int[(c_.*x_)^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  1/c^(n*p) \[Star] Int[(c*x)^(m+n*p)*(b+a*x^(-n))^p,x] /;
FreeQ[{a,b,c,m},x] && LtQ[n,0] && IntegerQ[p] && (p<0 || IGtQ[m,0])


(* ::Code:: *)
Int[(c_.*x_)^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  (c*x)^(m+1)*(a+b*x^n)^(p+1)/(a*c*(m+1)) /;
FreeQ[{a,b,c,m,n,p},x] && EqQ[(m+1)/n+p+1,0] && NeQ[m,-1]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  1/n \[Star] Subst[Int[x^(Simplify[(m+1)/n]-1)*(a+b*x)^p,x],x,x^n] /;
FreeQ[{a,b,m,n,p},x] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(c_*x_)^m_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  c^IntPart[m]*(c*x)^FracPart[m]/x^FracPart[m] \[Star] Int[x^m*(a+b*x^n)^p,x] /;
FreeQ[{a,b,c,m,n,p},x] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(c_.*x_)^m_.*(a_+b_.*x_^n_)^p_.,x_Symbol] :=
  Int[ExpandIntegrand[(c*x)^m*(a+b*x^n)^p,x],x] /;
FreeQ[{a,b,c,m,n},x] && IGtQ[p,0]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[n]},
  k \[Star] Subst[Int[x^(k*(m+1)-1)*(a+b*x^(k*n))^p,x],x,x^(1/k)] /;
 IntBinomialQ[a,b,1,k*n,k*(m+1)-1,p,x]] /;
FreeQ[{a,b,m,p},x] && FractionQ[n] && Not[IGtQ[p,0]]


(* ::Code:: *)
Int[(c_*x_)^m_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[n]},
  c^IntPart[m]*(c*x)^FracPart[m]/x^FracPart[m] \[Star] Int[x^m*(a+b*x^n)^p,x] /;
 IntBinomialQ[a,b,1,k*n,k*(m+1)-1,p,x]] /;
FreeQ[{a,b,c,m,p},x] && FractionQ[n] && Not[IGtQ[p,0]]


(* ::Code:: *)
Int[x_^m_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  x^(m+1)*(a+b*x^n)^(p+1)/(a*(m+1)) - 
  b*(m+n*(p+1)+1)/(a*(m+1)) \[Star] Int[x^(m+n)*(a+b*x^n)^p,x] /;
FreeQ[{a,b,m,n,p},x] && ILtQ[Simplify[(m+1)/n+p+1],0] && NeQ[m,-1]


(* ::Code:: *)
Int[(c_.*x_)^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  -(c*x)^(m+1)*(a+b*x^n)^(p+1)/(a*c*n*(p+1)) +
  (m+n*(p+1)+1)/(a*n*(p+1)) \[Star] Int[(c*x)^m*(a+b*x^n)^(p+1),x] /;
FreeQ[{a,b,c,m,n,p},x] && ILtQ[Simplify[(m+1)/n+p+1],0] && NeQ[p,-1]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  -Subst[Int[(a+b*x^(-n))^p/x^(m+2),x],x,1/x] /;
FreeQ[{a,b,p},x] && ILtQ[n,0] && IntegerQ[m]


(* ::Code:: *)
Int[(c_.*x_)^m_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[m]},
  -k/c \[Star] Subst[Int[(a+b*c^(-n)*x^(-k*n))^p/x^(k*(m+1)+1),x],x,1/(c*x)^(1/k)]] /;
FreeQ[{a,b,c,p},x] && ILtQ[n,0] && FractionQ[m]


(* ::Code:: *)
Int[(c_.*x_)^m_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  -1/c*(c*x)^(m+1)*(1/x)^(m+1) \[Star] Subst[Int[(a+b*x^(-n))^p/x^(m+2),x],x,1/x] /;
FreeQ[{a,b,c,m,p},x] && ILtQ[n,0] && Not[RationalQ[m]]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_),x_Symbol] :=
  c*x*(a+b*x^n)^(p+1)/a /;
FreeQ[{a,b,c,d,n,p},x] && EqQ[a*d-b*c*(n*(p+1)+1),0]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_*(c_+d_.*x_^n_)^p_,x_Symbol] :=
  x*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1)/(a*c) /;
FreeQ[{a,b,c,d,n,p},x] && EqQ[b*c+a*d,0] && EqQ[2*n*(p+1)+1,0]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.,x_Symbol] :=
  1/n \[Star] Subst[Int[x^(1/n-1)*(a+b*x)^p*(c+d*x)^q,x],x,x^n] /;
FreeQ[{a,b,c,d,p,q},x] && NeQ[b*c-a*d,0] && IntegerQ[1/n]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.,x_Symbol] :=
  Int[ExpandIntegrand[(a+b*x^n)^p*(c+d*x^n)^q,x],x] /;
FreeQ[{a,b,c,d,n},x] && NeQ[b*c-a*d,0] && IGtQ[p,0] && IGtQ[q,0]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_*(c_+d_.*x_^n_)^p_,x_Symbol] :=
  x*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1)/(a*c) - 
  b*d*(2*n*(p+1)+1)/(a*c) \[Star] Int[x^(2*n)*(a+b*x^n)^p*(c+d*x^n)^p,x] /;
FreeQ[{a,b,c,d,n,p},x] && EqQ[b*c+a*d,0] && ILtQ[Simplify[1/(2*n)+p+1],0]


(* ::Code:: *)
Int[(e_.*x_)^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_),x_Symbol] :=
  c*(e*x)^(m+1)*(a+b*x^n)^(p+1)/(a*e*(m+1)) /;
FreeQ[{a,b,c,d,e,m,n,p},x] && EqQ[a*d*(m+1)-b*c*(m+n*(p+1)+1),0] && NeQ[m,-1]


(* ::Code:: *)
Int[(e_.*x_)^m_.*(a_+b_.*x_^n_)^p_*(c_+d_.*x_^n_)^p_,x_Symbol] :=
  (e*x)^(m+1)*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1)/(a*c*e*(m+1)) /;
FreeQ[{a,b,c,d,e,m,n,p},x] && EqQ[b*c+a*d,0] && EqQ[(m+1)/n+2*(p+1),0] && NeQ[m,-1]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.,x_Symbol] :=
  1/n \[Star] Subst[Int[x^(Simplify[(m+1)/n]-1)*(a+b*x)^p*(c+d*x)^q,x],x,x^n] /;
FreeQ[{a,b,c,d,m,n,p,q},x] && NeQ[b*c-a*d,0] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(e_*x_)^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.,x_Symbol] :=
  e^IntPart[m]*(e*x)^FracPart[m]/x^FracPart[m] \[Star] Int[x^m*(a+b*x^n)^p*(c+d*x^n)^q,x] /;
FreeQ[{a,b,c,d,e,m,n,p,q},x] && NeQ[b*c-a*d,0] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(e_.*x_)^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.,x_Symbol] :=
  Int[ExpandIntegrand[(e*x)^m*(a+b*x^n)^p*(c+d*x^n)^q,x],x] /;
FreeQ[{a,b,c,d,e,m,n},x] && NeQ[b*c-a*d,0] && IGtQ[p,0] && IGtQ[q,0]


(* ::Code:: *)
Int[x_^m_*(a_+b_.*x_^n_)^p_*(c_+d_.*x_^n_)^p_,x_Symbol] :=
  x^(m+1)*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1)/(a*c*(m+1)) - 
  b*d*(m+2*n*(p+1)+1)/(a*c*(m+1)) \[Star] Int[x^(m+2*n)*(a+b*x^n)^p*(c+d*x^n)^p,x] /;
FreeQ[{a,b,c,d,m,n,p},x] && EqQ[b*c+a*d,0] && ILtQ[Simplify[(m+1)/(2*n)+p+1],0] && NeQ[m,-1]


(* ::Code:: *)
Int[(e_.*x_)^m_.*(a_+b_.*x_^n_)^p_*(c_+d_.*x_^n_)^p_,x_Symbol] :=
  -(e*x)^(m+1)*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1)/(2*a*c*e*n*(p+1)) + 
  (m+2*n*(p+1)+1)/(2*a*c*n*(p+1)) \[Star] Int[(e*x)^m*(a+b*x^n)^(p+1)*(c+d*x^n)^(p+1),x] /;
FreeQ[{a,b,c,d,e,m,n,p},x] && EqQ[b*c+a*d,0] && ILtQ[Simplify[(m+1)/(2*n)+p+1],0] && NeQ[p,-1]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.*(e_+f_.*x_^n_)^r_.,x_Symbol] :=
  1/n \[Star] Subst[Int[x^(1/n-1)*(a+b*x)^p*(c+d*x)^q*(e+f*x)^r,x],x,x^n] /;
FreeQ[{a,b,c,d,e,f,n,p,q,r},x] && IntegerQ[1/n]


(* ::Code:: *)
Int[(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.*(e_+f_.*x_^n_)^r_.,x_Symbol] :=
  Int[ExpandIntegrand[(a+b*x^n)^p*(c+d*x^n)^q*(e+f*x^n)^r,x],x] /;
FreeQ[{a,b,c,d,e,f,n},x] && IGtQ[p,-2] && IGtQ[q,0] && IGtQ[r,0]


(* ::Code:: *)
Int[x_^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.*(e_+f_.*x_^n_)^r_.,x_Symbol] :=
  1/n \[Star] Subst[Int[x^(Simplify[(m+1)/n]-1)*(a+b*x)^p*(c+d*x)^q*(e+f*x)^r,x],x,x^n] /;
FreeQ[{a,b,c,d,e,f,m,n,p,q,r},x] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(g_*x_)^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.*(e_+f_.*x_^n_)^r_.,x_Symbol] :=
  g^IntPart[m]*(g*x)^FracPart[m]/x^FracPart[m] \[Star] Int[x^m*(a+b*x^n)^p*(c+d*x^n)^q*(e+f*x^n)^r,x] /;
FreeQ[{a,b,c,d,e,f,g,m,n,p,q,r},x] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[(g_.*x_)^m_.*(a_+b_.*x_^n_)^p_.*(c_+d_.*x_^n_)^q_.*(e_+f_.*x_^n_)^r_.,x_Symbol] :=
  Int[ExpandIntegrand[(g*x)^m*(a+b*x^n)^p*(c+d*x^n)^q*(e+f*x^n)^r,x],x] /;
FreeQ[{a,b,c,d,e,f,g,m,n},x] && IGtQ[p,-2] && IGtQ[q,0] && IGtQ[r,0]


(* ::Code:: *)
(*Int[x_^m_.*Px_*(a_+b_.*x_^2)^p_.,x_Symbol] :=
  With[{B=Coeff[Px,x,1-m]},
  B*(a+b*x^2)^(p+1)/(2*b*(p+1)) + Int[ExpandIntegrand[(x^m*Px-B*x)*(a+b*x^2)^p,x],x] /;
 NeQ[B,0]] /;
FreeQ[{a,b,m},x] && PolyQ[Px,x] && IGtQ[p,0] && ILtQ[m,2] && LeQ[Exponent[Px,x],2*p]*)


(* ::Code:: *)
(*Int[x_^m_.*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  Int[x^(m+n*p)*(b+a*x^(-n))^p,x] /;
FreeQ[{a,b,m,n},x] && IntegerQ[p] && NegQ[n]*)


(* ::Code:: *)
(*Int[(c_.*x_)^m_*Px_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{Qx=PolynomialQuotient[Px,x,x], R=PolynomialRemainder[Px,x,x]},
    R*(c*x)^(m+1)*(a+b*x^n)^(p+1)/(a*c*(m+1)) + 
    1/(2*a*c*(m+1)) \[Star] Int[(c*x)^(m+1)*(a+b*x^n)^p*ExpandToSum[2*a*(m+1)*Qx-2*R*b*(m+n*(p+1)+1)*x^(n-1),x],x] /;
 NeQ[R,0]] /;
FreeQ[{a,b,c,p},x] && PolyQ[Px,x] && IGtQ[p,0] && IGtQ[n,0] && LtQ[m,-1] && LeQ[n-1,Expon[Px,x]]*)


(* ::Code:: *)
(*Int[(c_.*x_)^m_*Px_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{q=Expon[Px,x], Q=PolynomialQuotient[Px,x^Expon[Px,x],x], Rx=PolynomialRemainder[Px,x^Expon[Px,x],x]},
    Q*c^(n-q-1)*(c*x)^(m-n+q+1)*(a+b*x^n)^(p+1)/(b*(m+n*p+q+1)) + 
    1/(b*(m+n*p+q+1)) \[Star] Int[(c*x)^m*(a+b*x^n)^p*ExpandToSum[b*(m+q+n*p+1)*Rx-Q*a*(m-n+q+1)*x^(q-n),x],x] /;
  NeQ[m+n*p+q+1,0] && q-n>=0 && (IntegerQ[q/2] || IntegerQ[p+(q+1)/(2*n)])] /;
FreeQ[{a,b,c,m,p},x] && PolyQ[Px,x] && IGtQ[p,0] && IGtQ[n,0] && Not[IGtQ[m,0]]*)


(* ::Code:: *)
(*Int[Px_*(a_+b_.*x_^n_)^p_,x_Symbol] :=
  With[{q=Expon[Px,x], Q=PolynomialQuotient[Px,x^Expon[Px,x],x], Rx=PolynomialRemainder[Px,x^Expon[Px,x],x]},
    Q*x^(-n+q+1)*(a+b*x^n)^(p+1)/(b*(n*p+q+1)) + 
    1/(b*(n*p+q+1)) \[Star] Int[(a+b*x^n)^p*ExpandToSum[b*(q+n*p+1)*Rx-Q*a*(-n+q+1)*x^(q-n),x],x] /;
  NeQ[n*p+q+1,0] && q-n>=0 && (IntegerQ[2*p] || IntegerQ[p+(q+1)/(2*n)])] /;
FreeQ[{a,b,p},x] && PolyQ[Px,x] && IGtQ[p,0] && IGtQ[n,0]*)


(* ::Code:: *)
(*Int[x_^m_.*(a1_+b1_.*x_^n_)^p_*(a2_+b2_.*x_^n_)^p_,x_Symbol] :=
  -Subst[Int[(a1+b1*x^(-n))^p*(a2+b2*x^(-n))^p/x^(m+2),x],x,1/x] /;
FreeQ[{a1,b1,a2,b2,p},x] && EqQ[a2*b1+a1*b2,0] && ILtQ[2*n,0] && IntegerQ[m]*)


(* ::Code:: *)
(*Int[(c_.*x_)^m_*(a1_+b1_.*x_^n_)^p_*(a2_+b2_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[m]},
  -k/c \[Star] Subst[Int[(a1+b1*c^(-n)*x^(-k*n))^p*(a2+b2*c^(-n)*x^(-k*n))^p/x^(k*(m+1)+1),x],x,1/(c*x)^(1/k)]] /;
FreeQ[{a1,b1,a2,b2,c,p},x] && EqQ[a2*b1+a1*b2,0] && ILtQ[2*n,0] && FractionQ[m]*)


(* ::Code:: *)
(*Int[(c_.*x_)^m_*(a1_+b1_.*x_^n_)^p_*(a2_+b2_.*x_^n_)^p_,x_Symbol] :=
  -1/c*(c*x)^(m+1)*(1/x)^(m+1) \[Star] Subst[Int[(a1+b1*x^(-n))^p*(a2+b2*x^(-n))^p/x^(m+2),x],x,1/x] /;
FreeQ[{a1,b1,a2,b2,c,m,p},x] && EqQ[a2*b1+a1*b2,0] && ILtQ[2*n,0] && Not[RationalQ[m]]*)


(* ::Code:: *)
(*Int[x_^m_.*(a1_+b1_.*x_^n_)^p_*(a2_+b2_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[2*n]},
  k \[Star] Subst[Int[x^(k*(m+1)-1)*(a1+b1*x^(k*n))^p*(a2+b2*x^(k*n))^p,x],x,x^(1/k)] /;
 IntBinomialQ[a1*a2,b1*b2,1,2*k*n,k*(m+1)-1,p,x]] /;
FreeQ[{a1,b1,a2,b2,m,p},x] && EqQ[a2*b1+a1*b2,0] && FractionQ[2*n]*)


(* ::Code:: *)
(*Int[(c_*x_)^m_*(a1_+b1_.*x_^n_)^p_*(a2_+b2_.*x_^n_)^p_,x_Symbol] :=
  With[{k=Denominator[2*n]},
  c^IntPart[m]*(c*x)^FracPart[m]/x^FracPart[m] \[Star] Int[x^m*(a1+b1*x^n)^p*(a2+b2*x^n)^p,x] /;
 IntBinomialQ[a1*a2,b1*b2,1,2*k*n,k*(m+1)-1,p,x]] /;
FreeQ[{a1,b1,a2,b2,c,m,p},x] && EqQ[a2*b1+a1*b2,0] && FractionQ[2*n]*)
