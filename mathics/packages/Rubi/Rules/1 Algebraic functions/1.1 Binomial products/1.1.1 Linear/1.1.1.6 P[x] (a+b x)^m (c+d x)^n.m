(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  Int[Px*(a*c+b*d*x^2)^m,x] /;
FreeQ[{a,b,c,d,m,n},x] && PolyQ[Px,x] && EqQ[b*c+a*d,0] && EqQ[m,n] && (IntegerQ[m] || GtQ[a,0] && GtQ[c,0])


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  (a+b*x)^FracPart[m]*(c+d*x)^FracPart[m]/(a*c+b*d*x^2)^FracPart[m] \[Star] Int[Px*(a*c+b*d*x^2)^m,x] /;
FreeQ[{a,b,c,d,m,n},x] && PolyQ[Px,x] && EqQ[b*c+a*d,0] && EqQ[m,n] && Not[IntegerQ[m]]


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  Int[PolynomialQuotient[Px,a+b*x,x]*(a+b*x)^(m+1)*(c+d*x)^n,x] /;
FreeQ[{a,b,c,d,m,n},x] && PolyQ[Px,x] && EqQ[PolynomialRemainder[Px,a+b*x,x],0]


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  Int[ExpandIntegrand[Px*(a+b*x)^m*(c+d*x)^n,x],x] /;
FreeQ[{a,b,c,d,m,n},x] && PolyQ[Px,x] && (IGtQ[m,0] || IntegersQ[m,n])


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  2/b^(n+1) \[Star] Subst[Int[x^(2*m+1)*(b*c-a*d+d*x^2)^n*ExpandToSum[ReplaceAll[Px,x->(-a+x^2)/b],x],x],x,Sqrt[a+b*x]] /;
FreeQ[{a,b,c,d},x] && PolyQ[Px,x] && IntegerQ[m+1/2] && ILtQ[n,0]


(* ::Code:: *)
Int[Px_*(c_.+d_.*x_)^n_/(a_.+b_.*x_),x_Symbol] :=
  Int[ExpandIntegrand[(c+d*x)^FracPart[n],Px*(c+d*x)^IntPart[n]/(a+b*x),x],x] /;
FreeQ[{a,b,c,d,n},x] && PolyQ[Px,x] && FractionQ[n] && LtQ[n,-1]


(* ::Code:: *)
Int[Px_*(c_.+d_.*x_)^n_/(a_.+b_.*x_),x_Symbol] :=
  Int[ExpandIntegrand[Px*(c+d*x)^n/(a+b*x),x],x] /;
FreeQ[{a,b,c,d,n},x] && PolyQ[Px,x]


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  With[{Qx=PolynomialQuotient[Px,a+b*x,x], R=PolynomialRemainder[Px,a+b*x,x]},
  R*(a+b*x)^(m+1)*(c+d*x)^(n+1)/((m+1)*(b*c-a*d)) + 
  1/((m+1)*(b*c-a*d)) \[Star] Int[(a+b*x)^(m+1)*(c+d*x)^n*ExpandToSum[(m+1)*(b*c-a*d)*Qx-d*R*(m+n+2),x],x]] /;
FreeQ[{a,b,c,d,n},x] && PolyQ[Px,x] && LtQ[m,-1] && (IntegerQ[m] || Not[ILtQ[n,-1]])


(* ::Code:: *)
Int[Px_*(a_.+b_.*x_)^m_*(c_.+d_.*x_)^n_,x_Symbol] :=
  With[{q=Exponent[Px,x],Q=PolynomialQuotient[Px,(a+b*x)^Exponent[Px,x],x],Rx=PolynomialRemainder[Px,(a+b*x)^Exponent[Px,x],x]},
  Q*(a+b*x)^(m+q)*(c+d*x)^(n+1)/(d*(m+n+q+1)) + 
  1/(d*(m+n+q+1)) \[Star] Int[(a+b*x)^m*(c+d*x)^n*ExpandToSum[d*(m+n+q+1)*Rx-Q*(m+q)*(b*c-a*d)*(a+b*x)^(q-1),x],x] /;
 NeQ[m+n+q+1,0]] /;
FreeQ[{a,b,c,d,m,n},x] && PolynomialQ[Px,x]



