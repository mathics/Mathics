(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code:: *)
Int[a_,x_Symbol] :=
   a*x /;
FreeQ[a,x]


(* ::Code:: *)
Int[a_,x_Symbol] :=
   Together[a]*x /;
IndependentQ[a,x]


(* ::Code:: *)
Int[a_./x_,x_Symbol] :=
  a*Log[x] /;
FreeQ[a,x]


(* ::Code:: *)
Int[a_.*x_^m_.,x_Symbol] :=
  a*x^(m+1)/(m+1) /;
FreeQ[{a,m},x] && NeQ[m,-1]


(* ::Code:: *)
Int[c_./(a_.+b_.*x_),x_Symbol] :=
  c*Log[RemoveContent[a+b*x,x]]/b /;
FreeQ[{a,b,c},x]


(* ::Code:: *)
Int[c_.*(a_.+b_.*x_)^m_.,x_Symbol] :=
  c*(a+b*x)^(m+1)/(b*(m+1)) /;
FreeQ[{a,b,c,m},x] && NeQ[m,-1]


(* ::Code:: *)
Int[c_.*(a_.+b_.*u_)^m_,x_Symbol] :=
  1/D[u,x] \[Star] Subst[Int[c*(a+b*x)^m,x],x,u] /;
FreeQ[{a,b,c,m},x] && LinearQ[u,x] && NeQ[u,x]


(* ::Code:: *)
Int[a_*b_*Fx_,x_Symbol] :=
  a*b \[Star] Int[Fx,x] /;
FreeQ[{a,b},x] && Not[MatchQ[Fx, c_*Gx_ /; FreeQ[c,x]]]


(* ::Code:: *)
Int[-Fx_,x_Symbol] :=
  Identity[-1] \[Star] Int[Fx,x]


(* ::Code:: *)
Int[Complex[0,a_]*Fx_,x_Symbol] :=
  Complex[Identity[0],a] \[Star] Int[Fx,x] /;
EqQ[a,1] || EqQ[a,-1]


(* ::Code:: *)
Int[a_*Fx_,x_Symbol] :=
  a \[Star] Int[Fx,x] /;
FreeQ[a,x]


(* ::Code:: *)
Int[a_*Fx_,x_Symbol] :=
  Together[a] \[Star] Int[Fx,x] /;
IndependentQ[a,x]


(* ::Code:: *)
Int[(a_./x_)^p_,x_Symbol] :=
  -a*(a/x)^(p-1)/(p-1) /;
FreeQ[{a,p},x] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[(a_.*x_^n_)^p_,x_Symbol] :=
  (a*x^n)^p/x^(n*p) \[Star] Int[x^(n*p),x] /;
FreeQ[{a,n,p},x] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[Fx_.*x_^m_.*(a_.*x_)^p_,x_Symbol] :=
  1/a^m \[Star] Int[Fx*(a*x)^(m+p),x] /;
FreeQ[{a,m,p},x] && IntegerQ[m]


(* ::Code:: *)
Int[x_^m_.*(a_.*x_^n_)^p_,x_Symbol] :=
  1/(n*a^(Simplify[(m+1)/n]-1)) \[Star] Subst[Int[(a*x)^(Simplify[(m+1)/n]+p-1),x],x,x^n] /;
FreeQ[{a,m,n,p},x] && IntegerQ[Simplify[(m+1)/n]]


(* ::Code:: *)
Int[x_^m_.*(a_.*x_^n_.)^p_,x_Symbol] :=
  1/a^(m/n) \[Star] Int[(a*x^n)^(p+m/n),x] /;
FreeQ[{a,m,n,p},x] && IntegerQ[m/n] && LtQ[p*m/n,0]


(* ::Code:: *)
(*Int[u_*x_^m_.*(a_.*x_^n_.)^p_,x_Symbol] :=
  1/a^(m/n) \[Star] Int[u*(a*x^n)^(p+m/n),x] /;
FreeQ[{a,m,n,p},x] && IntegerQ[m/n]*)


(* ::Code:: *)
Int[x_^m_.*(a_.*x_^n_.)^p_,x_Symbol] :=
  (a*x^n)^p/x^(n*p) \[Star] Int[x^(m+n*p),x] /;
FreeQ[{a,m,n,p},x]


(* ::Code:: *)
Int[Fx_*(a_.*x_)^p_.*(b_.*x_^n_)^q_,x_Symbol] :=
  With[{p1n=Simplify[(p+1)/n]},
  a^p/(n*b^(p1n-1)) \[Star] Subst[Int[SubstFor[x^n,Fx,x]*(b*x)^(q+p1n-1),x],x,x^n] /;
 IntegerQ[p1n]] /;
FreeQ[{a,b,n,p,q},x] && (IntegerQ[p] || GtQ[a,0]) && FunctionOfQ[x^n,Fx,x] 


(* ::Code:: *)
Int[Fx_.*(a_.*x_)^m_.*(b_.*x_^i_.)^p_.*(c_.*x_^j_.)^q_.*(d_.*x_^k_.)^r_.,x_Symbol] :=
  (b*x^i)^p*(c*x^j)^q*(d*x^k)^r/(a*x)^(i*p+j*q+k*r) \[Star] Int[Fx*(a*x)^(m+i*p+j*q+k*r),x] /;
FreeQ[{a,b,c,d,i,j,k,m,p,q,r},x]


(* ::Code:: *)
Int[Fx_.*(a_.*x_)^m_.*(b_.*x_^i_.)^p_.*(c_.*x_^j_.)^q_.,x_Symbol] :=
  (b*x^i)^p*(c*x^j)^q/(a*x)^(i*p+j*q) \[Star] Int[Fx*(a*x)^(m+i*p+j*q),x] /;
FreeQ[{a,b,c,i,j,m,p,q},x]


(* ::Code:: *)
Int[Fx_.*(a_.*x_)^m_.*(b_.*x_^i_.)^p_,x_Symbol] :=
  b^IntPart[p]*(b*x^i)^FracPart[p]/(a^(i*IntPart[p])*(a*x)^(i*FracPart[p])) \[Star] Int[Fx*(a*x)^(m+i*p),x] /;
FreeQ[{a,b,i,m,p},x] && IntegerQ[i] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[Fx_.*(a_.*x_)^m_.*(b_.*x_^i_.)^p_,x_Symbol] :=
  (b*x^i)^p/(a*x)^(i*p) \[Star] Int[Fx*(a*x)^(m+i*p),x] /;
FreeQ[{a,b,i,m,p},x] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[Fx_.*(a_.*x_^m_)^p_.*(b_.*x_^n_)^q_.*(c_.*x_^k_)^r_.,x_Symbol] :=
  (a*x^m)^p*(b*x^n)^q*(c*x^k)^r/x^(m*p+n*q+k*r) \[Star] Int[Fx*x^(m*p+n*q+k*r),x] /;
FreeQ[{a,b,c,m,n,k,p,q,r},x]


(* ::Code:: *)
Int[Fx_.*(a_.*x_^m_)^p_.*(b_.*x_^n_)^q_.,x_Symbol] :=
  a^IntPart[p]*b^IntPart[q]*(a*x^m)^FracPart[p]*(b*x^n)^FracPart[q]/x^(m*FracPart[p]+n*FracPart[q]) \[Star] Int[Fx*x^(m*p+n*q),x] /;
FreeQ[{a,b,m,n,p,q},x]


(* ::Code:: *)
Int[Fx_.*(a_.*x_^m_)^p_,x_Symbol] :=
  a^IntPart[p]*(a*x^m)^FracPart[p]/x^(m*FracPart[p]) \[Star] Int[Fx*x^(m*p),x] /;
FreeQ[{a,m,p},x] && Not[IntegerQ[p]]


(* ::Code:: *)
(* Int[Fx_.*(Gx_+Hx_)^p_.,x_Symbol] :=
  Int[Fx*Hx^p,x] /;
FreeQ[p,x] && EqQ[Gx,0] *)


(* ::Code:: *)
Int[Fx_.*(a_+b_.*x_^n_.)^p_.,x_Symbol] :=
  Int[Fx*(b*x^n)^p,x] /;
FreeQ[{a,b,n,p},x] && EqQ[a,0]


(* ::Code:: *)
Int[Fx_.*(a_.+b_.*x_^n_.)^p_.,x_Symbol] :=
  Int[Fx*a^p,x] /;
FreeQ[{a,b,n,p},x] && EqQ[b,0]


(* ::Code:: *)
Int[Fx_.*(a_+b_.*x_^n_.+c_.*x_^j_.)^p_.,x_Symbol] :=
  Int[Fx*(b*x^n+c*x^(2*n))^p,x] /;
FreeQ[{a,b,c,n,p},x] && EqQ[j,2*n] && EqQ[a,0]


(* ::Code:: *)
Int[Fx_.*(a_.+b_.*x_^n_.+c_.*x_^j_.)^p_.,x_Symbol] :=
  Int[Fx*(a+c*x^(2*n))^p,x] /;
FreeQ[{a,b,c,n,p},x] && EqQ[j,2*n] && EqQ[b,0]


(* ::Code:: *)
Int[Fx_.*(a_.+b_.*x_^n_.+c_.*x_^j_.)^p_.,x_Symbol] :=
  Int[Fx*(a+b*x^n)^p,x] /;
FreeQ[{a,b,c,n,p},x] && EqQ[j,2*n] && EqQ[c,0]


(* ::Code:: *)
Int[Fx_.*(Gx_.+a_.*Hx_+b_.*Hx_)^p_.,x_Symbol] :=
  Int[Fx*(Gx+(a+b)*Hx)^p,x] /;
FreeQ[{a,b},x] && Not[FreeQ[Hx,x]]


(* ::Code:: *)
Int[Fx_.*(e_.*x_)^m_.*Px_^p_.,x_Symbol] :=
  With[{k=Expon[Px,x,Min]},
  1/e^(k*p) \[Star] Int[Fx*(e*x)^(m+k*p)*PolynomialQuotient[Px,x^k,x]^p,x] /;
 IGtQ[k,0]] /;
FreeQ[{e,m},x] && PolyQ[Px,x] && IntegerQ[p] && Not[MonomialQ[Px,x]] (*&& 
  Not[MatchQ[Px,a_+b_.*x^n_ /; FreeQ[{a,b,n},x]]] && 
  Not[MatchQ[Px,a_+b_.*x^n_+c_.*x^n2_ /; FreeQ[{a,b,c,n},x] && EqQ[n2,2*n]]]*)


(* ::Code:: *)
(*Int[Fx_.*(e_.*x_)^m_.*(a_.*x_^r_.+b_.*x_^s_.)^p_.,x_Symbol] :=
  1/e^(p*r) \[Star] Int[Fx*(e*x)^(m+p*r)*(a+b*x^(s-r))^p,x] /;
FreeQ[{a,b,e,m,r,s},x] && IntegerQ[p] && (IntegerQ[p*r] || GtQ[e,0]) && PosQ[s-r]*)


(* ::Code:: *)
(*Int[Fx_.*(e_.*x_)^m_.*(a_.*x_^r_.+b_.*x_^s_.+c_.*x_^t_.)^p_.,x_Symbol] :=
  1/e^(p*r) \[Star] Int[Fx*(e*x)^(m+p*r)*(a+b*x^(s-r)+c*x^(t-r))^p,x] /;
FreeQ[{a,b,c,e,m,r,s,t},x] && IntegerQ[p] && (IntegerQ[p*r] || GtQ[e,0]) && PosQ[s-r] && PosQ[t-r]*)


(* ::Code:: *)
(*Int[Fx_.*(e_.*x_)^m_.*(a_.*x_^r_.+b_.*x_^s_.+c_.*x_^t_.+d_.*x_^q_.)^p_.,x_Symbol] :=
  1/e^(p*r) \[Star] Int[Fx*(e*x)^(m+p*r)*(a+b*x^(s-r)+c*x^(t-r)+d*x^(q-r))^p,x] /;
FreeQ[{a,b,c,d,e,m,r,s,t,q},x] && IntegerQ[p] && (IntegerQ[p*r] || GtQ[e,0]) && PosQ[s-r] && PosQ[t-r] && PosQ[q-r]*)


(* ::Code:: *)
Int[Fx_.*Px_^p_,x_Symbol] :=
  Int[Fx*Px^Simplify[p],x] /;
PolyQ[Px,x] && Not[RationalQ[p]] && FreeQ[p,x] && RationalQ[Simplify[p]]


(* ::Code:: *)
Int[Fx_.*Px_,x_Symbol] :=
  With[{m=Expon[Px,x],b=Expon[Px,x]*Coeff[Px,x,Expon[Px,x]]/Coeff[Px,x,Expon[Px,x]-1]},
  PolynomialQuotient[Px,(1+b*x)^m,x] \[Star] Int[Fx*(1+b*x)^m,x] /;
 EqQ[PolynomialRemainder[Px,(1+b*x)^m,x],0]] /;
PolyQ[Px,x] && GtQ[Expon[Px,x],2] && NeQ[Coeff[Px,x,Expon[Px,x]-1],0] && Not[MatchQ[Px,(a_+b_.*x)^m_]] && Not[MatchQ[Px,x^m_*(a_+b_./x)^m_]]


(* ::Code:: *)
Int[Fx_.*Px_^p_,x_Symbol] :=
  With[{m=Expon[Px,x],b=Expon[Px,x]*Coeff[Px,x,Expon[Px,x]]/Coeff[Px,x,Expon[Px,x]-1]},
  PolynomialQuotient[Px,(1+b*x)^m,x]^p \[Star] Int[Fx*(1+b*x)^(m*p),x] /;
 EqQ[PolynomialRemainder[Px,(1+b*x)^m,x],0] && Not[MatchQ[Px,a_.*v_^m /; FreeQ[a,x] && LinearQ[v,x]]]] /;
PolyQ[Px,x] && GtQ[Expon[Px,x],2] && IntegerQ[p] && NeQ[Coeff[Px,x,Expon[Px,x]-1],0]


(* ::Code:: *)
Int[Fx_.*Px_^p_,x_Symbol] :=
  With[{m=Expon[Px,x],b=Expon[Px,x]*Coeff[Px,x,Expon[Px,x]]/Coeff[Px,x,Expon[Px,x]-1]},
  Px^p/(1+b*x)^(m*p) \[Star] Int[Fx*(1+b*x)^(m*p),x] /;
 EqQ[PolynomialRemainder[Px,(1+b*x)^m,x],0]] /;
PolyQ[Px,x] && GtQ[Expon[Px,x],2] && Not[IntegerQ[p]] && NeQ[Coeff[Px,x,Expon[Px,x]-1],0]


(* ::Code:: *)
(*Int[Fx_.*Px_,x_Symbol] :=
  With[{a=Rt[Coeff[Px,x,0],Expon[Px,x]],b=Rt[Coeff[Px,x,Expon[Px,x]],Expon[Px,x]]},
  Int[Fx*(a+b*x)^Expon[Px,x],x] /;
 EqQ[Px,(a+b*x)^Expon[Px,x]]] /;
PolyQ[Px,x] && GtQ[Expon[Px,x],1] && NeQ[Coeff[Px,x,0],0] && Not[MatchQ[Px,a_.*v_^Expon[Px,x] /; FreeQ[a,x] && LinearQ[v,x]]] *)


(* ::Code:: *)
(*Int[Fx_.*Px_^p_,x_Symbol] :=
  With[{a=Rt[Coeff[Px,x,0],Expon[Px,x]],b=Rt[Coeff[Px,x,Expon[Px,x]],Expon[Px,x]]},
  Int[Fx*(a+b*x)^(Expon[Px,x]*p),x] /;
 EqQ[Px,(a+b*x)^Expon[Px,x]]] /;
IntegerQ[p] && PolyQ[Px,x] && GtQ[Expon[Px,x],1] && NeQ[Coeff[Px,x,0],0]*)


(* ::Code:: *)
(*Int[Fx_.*Px_^p_,x_Symbol] :=
  With[{a=Rt[Coeff[Px,x,0],Expon[Px,x]],b=Rt[Coeff[Px,x,Expon[Px,x]],Expon[Px,x]]},
  ((a+b*x)^Expon[Px,x])^p/(a+b*x)^(Expon[Px,x]*p) \[Star] Int[Fx*(a+b*x)^(Expon[Px,x]*p),x] /;
 EqQ[Px,(a+b*x)^Expon[Px,x]]] /;
Not[IntegerQ[p]] && PolyQ[Px,x] && GtQ[Expon[Px,x],1] && NeQ[Coeff[Px,x,0],0]*)



