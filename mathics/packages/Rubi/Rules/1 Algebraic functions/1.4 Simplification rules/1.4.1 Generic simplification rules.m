(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Code:: *)
Int[Qx_/Px_,x_Symbol] :=
  With[{C=Simplify[Coefficient[Qx,x,Exponent[Qx,x]]/(Exponent[Px,x]*Coefficient[Px,x,Exponent[Px,x]])]},
  C*Log[RemoveContent[Px,x]]/;
 EqQ[Qx,C*D[Px,x]]] /;
PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Qx,x],Exponent[Px,x]-1] && GtQ[Exponent[Px,x],2]


(* ::Code:: *)
Int[Qx_*Px_^p_.,x_Symbol] :=
  With[{C=Simplify[Coefficient[Qx,x,Exponent[Qx,x]]/(Exponent[Px,x]*Coefficient[Px,x,Exponent[Px,x]])]},
  C*Px^(p+1)/(p+1) /;
 EqQ[Qx,C*D[Px,x]] && NeQ[p,-1]] /;
FreeQ[p,x] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Qx,x],Exponent[Px,x]-1] && GtQ[Exponent[Px,x],2]


(* ::Code:: *)
Int[Qx_*(a_.+b_.*Px_^n_)^p_.,x_Symbol] :=
  With[{C=Simplify[Coefficient[Qx,x,Exponent[Px,x]-1]/(Exponent[Px,x]*Coefficient[Px,x,Exponent[Px,x]])]},
  C \[Star] Subst[Int[(a+b*x^n)^p,x],x,Px] /;
 EqQ[Qx,C*D[Px,x]]] /;
FreeQ[{a,b,n,p},x] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Qx,x],Exponent[Px,x]-1] && Not[EqQ[a,0] && IntegerQ[p]]


(* ::Code:: *)
Int[Qx_*(a_.+b_.*Px_^n_.+c_.*Px_^n2_.)^p_.,x_Symbol] :=
  With[{C=Simplify[Coefficient[Qx,x,Exponent[Px,x]-1]/(Exponent[Px,x]*Coefficient[Px,x,Exponent[Px,x]])]},
  C \[Star] Subst[Int[(a+b*x^n+c*x^(2*n))^p,x],x,Px] /;
 EqQ[Qx,C*D[Px,x]]] /;
FreeQ[{a,b,c,n,p},x] && EqQ[n2,2*n] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Qx,x],Exponent[Px,x]-1]


(* ::Code:: *)
Int[Px_^p_.,x_Symbol] :=
  With[{n=Expon[Px,x],s=Coeff[Px,x,Expon[Px,x]-1]/(Expon[Px,x]*Coeff[Px,x,Expon[Px,x]])},
  Coeff[Px,x,n]^p \[Star] Int[(s+x)^(n*p),x] /;
 EqQ[Px,Coeff[Px,x,n]*(s+x)^n]] /;
PolyQ[Px,x] && IntegerQ[p]


(* ::Code:: *)
Int[Px_^p_.,x_Symbol] :=
  With[{n=Expon[Px,x],s=Coeff[Px,x,Expon[Px,x]-1]/(Expon[Px,x]*Coeff[Px,x,Expon[Px,x]])},
  Coeff[Px,x,n]^IntPart[p]*Px^FracPart[p]/(s+x)^(n*FracPart[p]) \[Star] Int[(s+x)^(n*p),x] /;
 EqQ[Px,Coeff[Px,x,n]*(s+x)^n]] /;
FreeQ[p,x] && PolyQ[Px,x] && Not[IntegerQ[p]]


(* ::Code:: *)
Int[Px_^p_,x_Symbol] :=
  With[{s=Coeff[Px,x,Expon[Px,x]-1]/(Expon[Px,x]*Coeff[Px,x,Expon[Px,x]])},
  Subst[Int[ExpandToSum[ReplaceAll[Px,x->x-s],x]^p,x],x,x+s] /;
 BinomialQ[ReplaceAll[Px,x->x-s],x] || IntegerQ[Expon[Px,x]/2] && TrinomialQ[ReplaceAll[Px,x->x-s],x]] /;
FreeQ[p,x] && PolyQ[Px,x] && GtQ[Expon[Px,x],2] && NeQ[Coeff[Px,x,Expon[Px,x]-1],0]


(* ::Code:: *)
Int[Px_^p_.,x_Symbol] :=
  Int[ExpandIntegrand[FactorSquareFree[Px^p,Extension->Automatic],x],x] /;
PolyQ[Px,x] && IGtQ[p,1] && GtQ[Expon[Px,x],2]


(* ::Code:: *)
If[TrueQ[$LoadShowSteps],

Int[u_,x_Symbol] :=
  ShowStep["","Int[a*F[x] + b*G[x] + \[CenterEllipsis],x]","a*Integrate[F[x],x] + b*Integrate[G[x],x] + \[CenterEllipsis]",Hold[
  IntSum[u,x]]] /;
SimplifyFlag && SumQ[u],

Int[u_,x_Symbol] :=
  IntSum[u,x] /;
SumQ[u]]


(* ::Code:: *)
Int[Fx_.*Px_^p_.*Qx_^q_.,x_Symbol] :=
  With[{C=PolynomialQuotient[Px,Qx,x]},
  C^p \[Star] Int[Fx*Qx^(p+q),x] /;
 IntegerQ[p] || GtQ[C,0]] /;
FreeQ[{p,q},x] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Px,x],Exponent[Qx,x]] && EqQ[PolynomialRemainder[Px,Qx,x],0] &&
  Not[IntegerQ[p] && SimplerQ[Px,Qx]]


(* ::Code:: *)
Int[Fx_.*Px_^p_*Qx_^q_,x_Symbol] :=
  With[{C=PolynomialQuotient[Px,Qx,x]},
  C^IntPart[p]*Px^FracPart[p]/Qx^FracPart[p] \[Star] Int[Fx*Qx^(p+q),x]] /;
FreeQ[{p,q},x] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && EqQ[Exponent[Px,x],Exponent[Qx,x]] && EqQ[PolynomialRemainder[Px,Qx,x],0] && 
  Not[IntegerQ[p]] && Not[SimplerQ[Px,Qx]]


(* ::Code:: *)
Int[Fx_.*Px_^p_.*Qx_^q_.,x_Symbol] :=
  Int[Fx*Qx^(p+q)*PolynomialQuotient[Px,Qx,x]^p,x] /;
FreeQ[q,x] && PolynomialQ[Px,x] && PolynomialQ[Qx,x] && IntegerQ[p] && GeQ[Exponent[Px,x],Exponent[Qx,x]] && 
  (LtQ[p*q,0] || LeQ[Exponent[Px,x],2*Exponent[Qx,x]]) && EqQ[PolynomialRemainder[Px,Qx,x],0] && Not[MonomialQ[Qx,x]]


(* ::Code:: *)
Int[Fx_.*(v_.*(a_+b_.*x_^n_.+c_.*x_^n2_.)^m_.*(d_+e_.*x_^n_.)^mm_.)^p_,x_Symbol] :=
  Int[Fx*(v/e^(2*m)*(b*e-c*d+c*e*x^n)^m)^p,x]/;
FreeQ[{a,b,c,d,e,n,p},x] && EqQ[n2,2*n] && EqQ[c*d^2-b*d*e+a*e^2,0] && IntegerQ[m] && EqQ[mm,-m]


(* ::Code:: *)
(* Int[Fx_.*(v_.*(a_+c_.*x_^n2_.)^m_.*(d_+e_.*x_^n_.)^mm_.)^p_,x_Symbol] :=
  Int[Fx*(v*c^m/e^(2*m)*(-d+e*x^n)^m)^p,x]/;
FreeQ[{a,c,d,e,n,p},x] && EqQ[n2,2*n] && EqQ[c*d^2+a*e^2,0] && IntegerQ[m] && EqQ[mm,-m] *)


(* ::Code:: *)
Int[Fx_.*(v_.*(a_+c_.*x_^n2_.)^m_.*(d_+e_.*x_^n_.)^mm_.)^p_,x_Symbol] :=
  Int[Fx*(v*a^m/d^(2*m)*(d-e*x^n)^m)^p,x] /;
FreeQ[{a,c,d,e,n,p},x] && EqQ[n2,2*n] && EqQ[c*d^2+a*e^2,0] && IntegerQ[m] && EqQ[mm,-m]


(* ::Code:: *)
(*Int[Fx_.*(c_+d_.*x_^n_)^q_*(a_+b_.*x_^n2_.)^p_,x_Symbol] :=
  (a+b*x^(2*n))^FracPart[p]/((c+d*x^n)^FracPart[p]*(a/c+b*x^n/d)^FracPart[p]) \[Star] Int[Fx*(c+d*x^n)^(p+q)*(a/c+b/d*x^n)^p,x] /;
FreeQ[{a,b,c,d,n,p,q},x] && EqQ[n2,2*n] && EqQ[b*c^2+a*d^2,0] && Not[IntegerQ[p]] && Not[IntegerQ[q]]*)


(* ::Code:: *)
(*Int[Fx_.*(d_+e_.*x_^n_)^q_*(a_+b_.*x_^n_+c_.*x_^n2_.)^p_,x_Symbol] :=
  (a+b*x^n+c*x^(2*n))^FracPart[p]/((d+e*x^n)^FracPart[p]*(a/d+c*x^n/e)^FracPart[p]) \[Star] Int[Fx*(d+e*x^n)^(p+q)*(a/d+c/e*x^n)^p,x] /;
FreeQ[{a,b,c,d,e,n,p,q},x] && EqQ[n2,2*n] && EqQ[c*d^2-b*d*e+a*e^2,0] && Not[IntegerQ[p]] && Not[IntegerQ[q]] && Not[EqQ[n,2]]*)


(* ::Code:: *)
(*Int[Fx_.*(a_+b_.*x_^n_.+c_.*x_^n2_.+d_.*x_^n3_.)^p_.,x_Symbol] :=
  1/d^(2*p) \[Star] Int[Fx*(c/3+d*x^n)^(3*p),x] /;
FreeQ[{a,b,c,d,n},x] && EqQ[n2,2*n] && EqQ[n3,3*n] && EqQ[c^2-3*b*d,0] && EqQ[c^3-27*a*d^2,0] && IntegerQ[p]*)


(* ::Code:: *)
(*Int[Fx_.*(a_+b_.*x_^n_.+c_.*x_^n2_.+d_.*x_^n3_.)^p_,x_Symbol] :=
  a^IntPart[p]*(a+b*x^n+c*x^(2*n)+d*x^(3*n))^FracPart[p]/(1+3*d*x^n/c)^(3*FracPart[p]) \[Star] Int[Fx*(1+3*d*x^n/c)^(3*p),x] /;
FreeQ[{a,b,c,d,n,p},x] && EqQ[n2,2*n] && EqQ[n3,3*n] && EqQ[c^2-3*b*d,0] && EqQ[c^3-27*a*d^2,0] && Not[IntegerQ[p]]*)


(* ::Code:: *)
(*Int[Fx_.*(c_.*x_)^m_.*Px_^p_.,x_Symbol] :=
  With[{k=Expon[Px,x,Min]},
  1/c^(k*p) \[Star] Int[Fx*PolynomialQuotient[Px,x^k,x]^p,x] /;
 EqQ[m+k*p,0]] /;
FreeQ[{c,m},x] && PolyQ[Px,x] && IntegerQ[p] && Not[MonomialQ[Px,x]]*)



